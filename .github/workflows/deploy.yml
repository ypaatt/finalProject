name: CI/CD for IoT Node App

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test-and-lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install Dependencies
      run: npm ci

    - name: Run Linter
      run: npm run lint || true

    - name: Run Tests
      run: npm test

  security-scan:
    needs: test-and-lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Run Security Scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  build-and-deploy:
    needs: security-scan
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/iot-node-app:latest

    - name: Deploy to IoT Device
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.DEVICE_IP }}
        username: iiot
        key: ${{ secrets.SSH_KEY }}
        script: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/iot-node-app:latest
          docker stop iot-node-app || true
          docker rm iot-node-app || true
          docker run -d \
            -p 3000:3000 \
            --name iot-node-app \
            --restart unless-stopped \
            -e NODE_ENV=production \
            ${{ secrets.DOCKER_USERNAME }}/iot-node-app:latest
